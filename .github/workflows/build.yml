name: Build

on:
  push:
    branches:
      - "main"
  release:
    types: [published]

env:
  IMAGE_NAME: jsc-vite-ts
  IMAGE_TITLE: Simple Typescript application with Vite
  IMAGE_DESCRIPTION: This is the image for Simple Typescript application with Vite.
  SRC_PATH: code/
  DOCKERFILE_PATH: etc/docker/Dockerfile

jobs:
  install:
    name: Build source code
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Dependencies
        run: yarn --cwd ${{ env.SRC_PATH }} install --frozen-lockfile

      - name: Create tarball
        run: tar -czf ${{ env.IMAGE_NAME }}.tar.gz -C ${{ env.SRC_PATH }} node_modules

      - name: Upload common artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          retention-days: 1
          path: ${{ env.IMAGE_NAME }}.tar.gz

  lint:
    name: Run ESlint on source code
    runs-on: ubuntu-24.04
    needs: install

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}

      - name: Untar common Dependencies
        run: tar -xzf ${{ env.IMAGE_NAME }}.tar.gz -C ./${{ env.SRC_PATH }}

      - name: Run ESLint
        run: |
          yarn --cwd ${{ env.SRC_PATH }} lint

  test:
    name: Run tests on source code
    runs-on: ubuntu-24.04
    needs: install

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}

      - name: Untar Dependencies
        run: tar -xzf ${{ env.IMAGE_NAME }}.tar.gz -C ./${{ env.SRC_PATH }}

      - name: Run Tests
        run: |
          mkdir -p ${{ env.SRC_PATH }}coverage
          HAVE_TEST=$(find ${{ env.SRC_PATH }} -name "*.test.ts" | wc -l)
          if [ $HAVE_TEST -ne 0 ];
          then
            yarn --cwd ${{ env.SRC_PATH }} test --coverage
          fi
          echo "HAVE_TEST=${HAVE_TEST}" > ${{ env.SRC_PATH }}coverage/have_test.txt

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ env.IMAGE_NAME }}
          retention-days: 1
          path: ${{ env.SRC_PATH }}coverage/

  upload-coverage:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-24.04
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ env.IMAGE_NAME }}
          path: ${{ env.SRC_PATH }}coverage

      - name: Set environment variable
        run: |
          cat ${{ env.SRC_PATH }}coverage/have_test.txt >> $GITHUB_ENV

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: env.HAVE_TEST != 0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./${{ env.SRC_PATH }}coverage/*.json
          flags: unittests
          name: code-coverage
          fail_ci_if_error: true

  build-image:
    name: Build image and push to Docker Hub
    runs-on: ubuntu-24.04
    needs:
      - lint
      - upload-coverage
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variable
        run: |
          if [ -f ${{ env.SRC_PATH }}/.env.production ]; then
            cat ${{ env.SRC_PATH }}/.env.production >> $GITHUB_ENV
          else
            cat ${{ env.SRC_PATH }}/.env.example >> $GITHUB_ENV
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VITE_APP_NAME=${{ env.IMAGE_TITLE }}
            VITE_APP_VERSION=${{ github.ref_name}}
            VITE_FACEBOOK_APP_ID=${{ env.VITE_FACEBOOK_APP_ID }}
            VITE_DESCRIPTION=${{ env.VITE_DESCRIPTION }}
            VITE_APP_URL=${{ env.VITE_APP_URL }}
            VITE_APP_IMAGE=${{ env.VITE_APP_IMAGE }}
